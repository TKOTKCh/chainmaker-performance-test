// Code generated by MockGen. DO NOT EDIT.
// Source: subservice/subService.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	chainmaker_sdk_go "chainmaker.org/chainmaker/sdk-go/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockBlockSubscriber is a mock of BlockSubscriber interface.
type MockBlockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSubscriberMockRecorder
}

// MockBlockSubscriberMockRecorder is the mock recorder for MockBlockSubscriber.
type MockBlockSubscriberMockRecorder struct {
	mock *MockBlockSubscriber
}

// NewMockBlockSubscriber creates a new mock instance.
func NewMockBlockSubscriber(ctrl *gomock.Controller) *MockBlockSubscriber {
	mock := &MockBlockSubscriber{ctrl: ctrl}
	mock.recorder = &MockBlockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockSubscriber) EXPECT() *MockBlockSubscriberMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBlockSubscriber) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBlockSubscriberMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBlockSubscriber)(nil).Close))
}

// Run mocks base method.
func (m *MockBlockSubscriber) Run(ctx context.Context, startBlock, endBlock int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, startBlock, endBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockBlockSubscriberMockRecorder) Run(ctx, startBlock, endBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockBlockSubscriber)(nil).Run), ctx, startBlock, endBlock)
}

// SetClient mocks base method.
func (m *MockBlockSubscriber) SetClient(c *chainmaker_sdk_go.ChainClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", c)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockBlockSubscriberMockRecorder) SetClient(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockBlockSubscriber)(nil).SetClient), c)
}

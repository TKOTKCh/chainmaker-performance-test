// Code generated by MockGen. DO NOT EDIT.
// Source: ./chainclient/client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	chainmaker_sdk_go "chainmaker.org/chainmaker/sdk-go/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockClientCreator is a mock of ClientCreator interface.
type MockClientCreator struct {
	ctrl     *gomock.Controller
	recorder *MockClientCreatorMockRecorder
}

// MockClientCreatorMockRecorder is the mock recorder for MockClientCreator.
type MockClientCreatorMockRecorder struct {
	mock *MockClientCreator
}

// NewMockClientCreator creates a new mock instance.
func NewMockClientCreator(ctrl *gomock.Controller) *MockClientCreator {
	mock := &MockClientCreator{ctrl: ctrl}
	mock.recorder = &MockClientCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientCreator) EXPECT() *MockClientCreatorMockRecorder {
	return m.recorder
}

// CreateClientWithConfig mocks base method.
func (m *MockClientCreator) CreateClientWithConfig(arg0 string) (*chainmaker_sdk_go.ChainClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientWithConfig", arg0)
	ret0, _ := ret[0].(*chainmaker_sdk_go.ChainClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientWithConfig indicates an expected call of CreateClientWithConfig.
func (mr *MockClientCreatorMockRecorder) CreateClientWithConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientWithConfig", reflect.TypeOf((*MockClientCreator)(nil).CreateClientWithConfig), arg0)
}

// MockContractClaimCreator is a mock of ContractClaimCreator interface.
type MockContractClaimCreator struct {
	ctrl     *gomock.Controller
	recorder *MockContractClaimCreatorMockRecorder
}

// MockContractClaimCreatorMockRecorder is the mock recorder for MockContractClaimCreator.
type MockContractClaimCreatorMockRecorder struct {
	mock *MockContractClaimCreator
}

// NewMockContractClaimCreator creates a new mock instance.
func NewMockContractClaimCreator(ctrl *gomock.Controller) *MockContractClaimCreator {
	mock := &MockContractClaimCreator{ctrl: ctrl}
	mock.recorder = &MockContractClaimCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractClaimCreator) EXPECT() *MockContractClaimCreatorMockRecorder {
	return m.recorder
}

// UserContractCreate mocks base method.
func (m *MockContractClaimCreator) UserContractCreate(arg0 *chainmaker_sdk_go.ChainClient, arg1 bool, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UserContractCreate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserContractCreate indicates an expected call of UserContractCreate.
func (mr *MockContractClaimCreatorMockRecorder) UserContractCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserContractCreate", reflect.TypeOf((*MockContractClaimCreator)(nil).UserContractCreate), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./parallel/parallel_query.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	chainmaker_sdk_go "chainmaker.org/chainmaker/sdk-go/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockContinuousQueryPressureTester is a mock of ContinuousQueryPressureTester interface.
type MockContinuousQueryPressureTester struct {
	ctrl     *gomock.Controller
	recorder *MockContinuousQueryPressureTesterMockRecorder
}

// MockContinuousQueryPressureTesterMockRecorder is the mock recorder for MockContinuousQueryPressureTester.
type MockContinuousQueryPressureTesterMockRecorder struct {
	mock *MockContinuousQueryPressureTester
}

// NewMockContinuousQueryPressureTester creates a new mock instance.
func NewMockContinuousQueryPressureTester(ctrl *gomock.Controller) *MockContinuousQueryPressureTester {
	mock := &MockContinuousQueryPressureTester{ctrl: ctrl}
	mock.recorder = &MockContinuousQueryPressureTesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContinuousQueryPressureTester) EXPECT() *MockContinuousQueryPressureTesterMockRecorder {
	return m.recorder
}

// QueryPressureTest mocks base method.
func (m *MockContinuousQueryPressureTester) QueryPressureTest(arg0 *chainmaker_sdk_go.ChainClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPressureTest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryPressureTest indicates an expected call of QueryPressureTest.
func (mr *MockContinuousQueryPressureTesterMockRecorder) QueryPressureTest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPressureTest", reflect.TypeOf((*MockContinuousQueryPressureTester)(nil).QueryPressureTest), arg0)
}
